from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models.data import Participant, Pool
from services import pool_service

router = Router()

class PoolCreation(StatesGroup):
    waiting_for_name = State()
    waiting_for_participants = State()

class PoolParticipant(StatesGroup):
    waiting_for_pool_name = State()

class PoolInvitation(StatesGroup):
    waiting_for_pool_name = State()
    waiting_for_code = State()

# Start command and basic information
@router.message(CommandStart())
async def cmd_start(message: Message):
    """Handler for /start command"""
    user_name = message.from_user.first_name
    
    welcome_text = (
        f"„Éæ(‚âß‚ñΩ‚â¶*)o –ü-–ø—Ä–∏–≤–µ—Ç, {user_name}-—Å–∞–Ω! (‚óï‚Äø‚óï‚úø)\n\n"
        f"–Ø ActivityBot-—Ç—è–Ω, —Ç–≤–æ—è –∫–∞–≤–∞–π–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ –≤ –≤—ã–±–æ—Ä–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π! (Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß\n\n"
        f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å –º–µ–Ω—è –∫–∞–∫ –≤–æ–ª—à–µ–±–Ω—É—é –∫–æ—Ä–æ–±–æ—á–∫—É —Å –∑–∞–ø–∏—Å–∫–∞–º–∏-–∏–¥–µ—è–º–∏ –æ —Ç–æ–º, —á—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏! "
        f"–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö —Å–ø–æ—Ä–æ–≤ –æ —Ç–æ–º, —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è - –¥–æ–≤–µ—Ä—å –≤—ã–±–æ—Ä –º–Ω–µ! ‚ú®\n\n"
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:\n"
        f"1Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø—É–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é /create_pool\n"
        f"2Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å —Ç—É–¥–∞ –∏–¥–µ–∏ —á–µ—Ä–µ–∑ /add_activity\n"
        f"3Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∫–æ–º–∞–Ω–¥–æ–π /invite\n"
        f"4Ô∏è‚É£ –ö–æ–≥–¥–∞ –¥—Ä—É–∑—å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, –æ–Ω–∏ —Ç–æ–∂–µ —Å–º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏!\n"
        f"5Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π /select –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        f"‚ùó –ù–µ–±–æ–ª—å—à–æ–π —Å–µ–∫—Ä–µ—Ç: –∫–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —á—å—è-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ, "
        f"–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –≤—ã–ø–∞–¥–∞—Ç—å —Ä–µ–∂–µ! –¢–∞–∫ –≤—Å–µ–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ~ (‚ó†‚Äø‚ó†‚úø)\n\n"
        f"‚úß*„ÄÇ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã „ÄÇ*‚úß\n"
        f"üå∏ /create_pool - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—É–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
        f"üå∏ /join_pool - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—É–ª—É\n"
        f"üå∏ /invite - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π (–µ—Å–ª–∏ —Ç—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—É–ª–∞)\n"
        f"üå∏ /add_activity - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        f"üå∏ /select - –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        f"üå∏ /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n"
        f"–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∫–æ–º–∞–Ω–¥—ã /create_pool –∏ –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π! (Ôæâ¬¥„ÉÆ`)Ôæâ*: ÔΩ•Ôæü"
    )
    
    await message.answer(welcome_text)

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞–º–∏</b>:\n"
        "/create_pool - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—É–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
        "/join_pool - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—É–ª—É\n"
        "/invite - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø—É–ª\n"
        "/exit_pool - –í—ã–π—Ç–∏ –∏–∑ –ø—É–ª–∞\n"
        "/my_pools - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø—É–ª—ã\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏</b>:\n"
        "/add_activity - –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—É–ª\n"
        "/select - –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:\n"
        "/pool_info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    await message.answer(help_text, parse_mode="HTML")

# Pool creation
@router.message(Command("create_pool"))
async def cmd_create_pool(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:")
    await state.set_state(PoolCreation.waiting_for_name)

@router.message(PoolCreation.waiting_for_name)
async def process_pool_name(message: Message, state: FSMContext):
    pool_name = message.text.strip()
    
    # Check if name is valid
    if not pool_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    # Check if pool with this name already exists
    existing_pool = pool_service.get_pool(pool_name)
    if existing_pool:
        await message.answer(f"–ü—É–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{pool_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    # Save pool name
    await state.update_data(pool_name=pool_name)
    
    # Create participant object for the creator
    creator = Participant(
        user_id=message.from_user.id,
        username=message.from_user.username or message.from_user.full_name
    )
    
    # Create pool with creator as first participant
    new_pool = pool_service.create_pool(pool_name, [creator])
    
    if new_pool:
        await message.answer(
            f"‚úÖ –ü—É–ª '{pool_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π /add_activity\n"
            f"–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /invite\n\n"
            f"–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é."
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # End the conversation
    await state.clear()

# Join a pool
@router.message(Command("join_pool"))
async def cmd_join_pool(message: Message, state: FSMContext):
    cmd_parts = message.text.split(maxsplit=1)
    
    if len(cmd_parts) > 1:
        # Check if an invitation code was provided
        code = cmd_parts[1].strip()
        pool_name = pool_service.validate_invitation_code(code)
        
        if pool_name:
            # Proceed with joining using the code
            await process_join_with_code(message, state, pool_name, code)
            return
    
    await message.answer(
        "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—É–ª—É, –≤–∞–º –Ω—É–∂–µ–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—É–ª–∞.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:"
    )
    await state.set_state(PoolInvitation.waiting_for_code)

@router.message(PoolInvitation.waiting_for_code)
async def process_invitation_code(message: Message, state: FSMContext):
    code = message.text.strip()
    
    # Validate invitation code
    pool_name = pool_service.validate_invitation_code(code)
    
    if not pool_name:
        await message.answer("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    await process_join_with_code(message, state, pool_name, code)

async def process_join_with_code(message: Message, state: FSMContext, pool_name: str, code: str):
    # Check if pool exists
    pool = pool_service.get_pool(pool_name)
    if not pool:
        await message.answer(f"‚ùå –ü—É–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{pool_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    # Check if user is already a participant
    for participant in pool.participants:
        if participant.user_id == message.from_user.id:
            await message.answer(f"–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—É–ª–∞ '{pool_name}'.")
            await state.clear()
            return
    
    # Add user to the pool
    new_participant = Participant(
        user_id=message.from_user.id,
        username=message.from_user.username or message.from_user.full_name
    )
    
    success = pool_service.add_participant(pool_name, new_participant)
    
    if success:
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—É–ª—É '{pool_name}'!")
        
        # Remove the used invitation code
        if hasattr(pool, 'invites') and code in pool.invites:
            storage = pool_service._get_storage()
            del storage.pools[pool_name].invites[code]
            pool_service._save_storage(storage)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—É–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    await state.clear()

@router.message(PoolParticipant.waiting_for_pool_name)
async def process_join_pool(message: Message, state: FSMContext):
    pool_name = message.text.strip()
    
    # Check if pool exists
    pool = pool_service.get_pool(pool_name)
    if not pool:
        await message.answer(f"‚ùå –ü—É–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{pool_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    # Check if user is already a participant
    for participant in pool.participants:
        if participant.user_id == message.from_user.id:
            await message.answer(f"–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—É–ª–∞ '{pool_name}'.")
            await state.clear()
            return
    
    # Check if user is authorized to join (must be the creator or use invite code)
    if not pool_service.is_user_authorized_for_pool(pool_name, message.from_user.id):
        await message.answer(
            f"‚ùå –î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª—É '{pool_name}' —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—É–ª–∞.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join_pool —Å –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."
        )
        await state.clear()
        return
    
    # Add user to the pool
    new_participant = Participant(
        user_id=message.from_user.id,
        username=message.from_user.username or message.from_user.full_name
    )
    
    success = pool_service.add_participant(pool_name, new_participant)
    
    if success:
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—É–ª—É '{pool_name}'!")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—É–ª—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    await state.clear()

# Exit a pool
@router.message(Command("exit_pool"))
async def cmd_exit_pool(message: Message, state: FSMContext):
    user_pools = pool_service.get_pools_by_participant(message.from_user.id)
    
    if not user_pools:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—É–ª–∞.")
        return
    
    pool_list = "\n".join([f"{i+1}. {pool.name}" for i, pool in enumerate(user_pools)])
    
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n{pool_list}")
    await state.set_state(PoolParticipant.waiting_for_pool_name)
    await state.update_data(user_pools=user_pools)

@router.message(F.text.regexp(r"^\d+$"), PoolParticipant.waiting_for_pool_name)
async def process_exit_pool(message: Message, state: FSMContext):
    data = await state.get_data()
    user_pools = data.get("user_pools", [])
    
    try:
        index = int(message.text) - 1
        if 0 <= index < len(user_pools):
            selected_pool = user_pools[index]
            
            success = pool_service.remove_participant(selected_pool.name, message.from_user.id)
            
            if success:
                await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –ø—É–ª–∞ '{selected_pool.name}'.")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –ø—É–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    
    await state.clear()

# Show user's pools
@router.message(Command("my_pools"))
async def cmd_my_pools(message: Message):
    user_pools = pool_service.get_pools_by_participant(message.from_user.id)
    
    if not user_pools:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—É–ª–∞.")
        return
    
    response = "üìã <b>–í–∞—à–∏ –ø—É–ª—ã</b>:\n\n"
    
    for i, pool in enumerate(user_pools):
        activities_count = len(pool.activities)
        participants_count = len(pool.participants)
        
        response += (
            f"{i+1}. <b>{pool.name}</b>\n"
            f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {activities_count}\n"
            f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n\n"
        )
    
    response += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pool_info [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–ª–∞] –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    
    await message.answer(response, parse_mode="HTML")

# Invite to pool
@router.message(Command("invite"))
async def cmd_invite(message: Message, state: FSMContext):
    user_pools = pool_service.get_pools_by_participant(message.from_user.id)
    
    if not user_pools:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—É–ª–∞.")
        return
    
    # Filter pools where user is the creator
    creator_pools = [pool for pool in user_pools if pool.creator_id == message.from_user.id]
    
    if not creator_pools:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—É–ª–∞. –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—É–ª–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    pool_list = "\n".join([f"{i+1}. {pool.name}" for i, pool in enumerate(creator_pools)])
    
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n{pool_list}")
    await state.set_state(PoolInvitation.waiting_for_pool_name)
    await state.update_data(creator_pools=creator_pools)

@router.message(F.text.regexp(r"^\d+$"), PoolInvitation.waiting_for_pool_name)
async def process_invite_pool_selection(message: Message, state: FSMContext):
    data = await state.get_data()
    creator_pools = data.get("creator_pools", [])
    
    try:
        index = int(message.text) - 1
        if 0 <= index < len(creator_pools):
            selected_pool = creator_pools[index]
            
            # Generate invitation code
            invitation_code = pool_service.generate_invitation_code(selected_pool.name, message.from_user.id)
            
            if invitation_code:
                await message.answer(
                    f"‚úÖ –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø—É–ª–∞ '{selected_pool.name}':\n\n"
                    f"<code>{invitation_code}</code>\n\n"
                    f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å —Ç–µ–º, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å. "
                    f"–û–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /join_pool –∏ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –∫–æ–¥."
                , parse_mode="HTML")
            else:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ—Ç –ø—É–ª. –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—É–ª–∞ –º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–≥–∏—Ö.")
        else:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    
    await state.clear() 