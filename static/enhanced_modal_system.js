
// ============================================
// ENHANCED MODAL SYSTEM FOR PRP-016
// Generated by EnhancedModalSystem
// ============================================


// ============================================
// ENHANCED MODAL SYSTEM
// ============================================

class EnhancedModalSystem {
    constructor() {
        this.activeModals = new Map();
        this.modalHistory = [];
        this.keyboardHandlers = new Map();
        this.touchGestures = new Map();
        this.markdownRenderer = null;
        this.isAnimating = false;

        console.log('üé≠ EnhancedModalSystem initialized');
        this.setupGlobalEventListeners();
        this.setupMarkdownRenderer();
    }

    // Setup global event listeners
    setupGlobalEventListeners() {
        // Escape key to close top modal
        const escapeHandler = (e) => {
            if (e.key === 'Escape') {
                e.preventDefault();
                this.closeTopModal();
            }
        };
        document.addEventListener('keydown', escapeHandler);
        this.keyboardHandlers.set('escape', escapeHandler);

        // Handle window resize
        window.addEventListener('resize', () => {
            this.debounce(this.handleResize.bind(this), 250);
        });

        // Handle page visibility changes
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.pauseModalAnimations();
            } else {
                this.resumeModalAnimations();
            }
        });
    }

    // Setup enhanced markdown renderer
    setupMarkdownRenderer() {
        // Add markdown-it library (would need to be included in real implementation)
        if (typeof marked !== 'undefined') {
            this.markdownRenderer = marked;
            console.log('üìù Using marked.js for markdown rendering');
        } else {
            // Fallback simple markdown parser
            this.markdownRenderer = {
                parse: (text) => {
                    // Simple markdown parsing
                    return text
                        .replace(/^### (.*$)/gim, '<h3>$1</h3>')
                        .replace(/^## (.*$)/gim, '<h2>$1</h2>')
                        .replace(/^# (.*$)/gim, '<h1>$1</h1>')
                        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                        .replace(/\*(.*?)\*/g, '<em>$1</em>')
                        .replace(/`([^`]+)`/g, '<code>$1</code>')
                        .replace(
                            /\[([^\]]+)\]\(([^)]+)\)/g,
                            '<a href="$2" target="_blank">$1</a>'
                        )
                        .replace(
                            /^\d+\.\s/gm,
                            (match) => `<p class="numbered-list">${match}</p>`
                        )
                        .replace(/^-\s+(.+)/g, '<li class="bullet-list">$1</li>')
                        .replace(/\n\n/g, '</p><p>')
                        .replace(/<\/p><p><\/p>/g, '</p><br><br>');
                }
            };
            console.log('üìù Using fallback markdown parser');
        }
    }

    // Enhanced modal creation
    showModal(title, content, options = {}) {
        const modalId = this.generateModalId();
        const modalConfig = {
            title: title,
            content: content,
            width: options.width || 'auto',
            height: options.height || 'auto',
            className: options.className || '',
            allowClose: options.allowClose !== false,
            backdropBlur: options.backdropBlur !== false,
            showHeader: options.showHeader !== false,
            footerContent: options.footerContent || null,
            onOpen: options.onOpen || null,
            onClose: options.onClose || null,
            customStyles: options.customStyles || {},
            ...options
        };

        console.log(`üé≠ Creating modal: ${modalId} - ${title}`);

        // Create modal element
        const modal = this.createModalElement(modalId, modalConfig);
        document.body.appendChild(modal);

        // Add to tracking
        this.activeModals.set(modalId, {
            element: modal,
            config: modalConfig,
            isOpen: true,
            openedAt: Date.now()
        });

        // Animate in
        this.animateModalIn(modalId, () => {
            if (modalConfig.onOpen) {
                modalConfig.onOpen(modalId);
            }
        });

        return modalId;
    }

    // Generate unique modal ID
    generateModalId() {
        return 'modal_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    // Create modal DOM element
    createModalElement(modalId, config) {
        const modal = document.createElement('div');
        modal.id = modalId;
        modal.className = 'modal-overlay enhanced-modal';
        modal.setAttribute('role', 'dialog');
        modal.setAttribute('aria-modal', 'true');
        modal.setAttribute('aria-labelledby', `${modalId}-title`);
        modal.setAttribute('aria-describedby', `${modalId}-content`);

        // Apply custom styles
        Object.assign(modal.style, config.customStyles);

        // Modal overlay (backdrop)
        const overlay = document.createElement('div');
        overlay.className = 'modal-backdrop';
        if (config.backdropBlur) {
            overlay.style.backdropFilter = 'blur(8px)';
        }

        // Modal content container
        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content enhanced-modal-content';
        modalContent.setAttribute('tabindex', '-1');

        // Apply sizing
        if (config.width !== 'auto') {
            modalContent.style.width = typeof config.width === 'number'
                ? `${config.width}px`
                : config.width;
        }
        if (config.height !== 'auto') {
            modalContent.style.height = typeof config.height === 'number'
                ? `${config.height}px`
                : config.height;
        }

        // Modal header
        let header = '';
        if (config.showHeader) {
            header = `
                <div class="modal-header">
                    <h2 id="${modalId}-title" class="modal-title">
                        <span class="title-icon">üìù</span>
                        ${this.escapeHtml(config.title)}
                    </h2>
                    ${config.allowClose ? `<button class="modal-close-btn" data-modal-id="${modalId}" aria-label="Close modal">
                        <span class="close-icon">‚úï</span>
                    </button>` : ''}
                </div>
            `;
        }

        // Modal body with enhanced markdown rendering
        const renderedContent = this.renderContent(config.content);
        const body = `
            <div class="modal-body" id="${modalId}-content">
                <div class="modal-content-wrapper">
                    ${renderedContent}
                </div>
            </div>
        `;

        // Modal footer
        let footer = '';
        if (config.footerContent) {
            footer = `
                <div class="modal-footer">
                    ${config.footerContent}
                </div>
            `;
        }

        // Assemble modal
        modalContent.innerHTML = header + body + footer;
        if (config.className) {
            modalContent.classList.add(config.className);
        }

        // Add close functionality to backdrop
        if (config.allowClose) {
            overlay.addEventListener('click', () => {
                this.closeModal(modalId);
            });
        }

        // Prevent content clicks from closing modal
        modalContent.addEventListener('click', (e) => {
            e.stopPropagation();
        });

        // Assemble final modal
        modal.appendChild(overlay);
        modal.appendChild(modalContent);

        return modal;
    }

    // Render content with enhanced markdown support
    renderContent(content) {
        if (typeof content === 'string') {
            // Check if content is markdown
            if (this.isMarkdown(content)) {
                const rendered = this.markdownRenderer.parse(content);
                return `<div class="markdown-content">${rendered}</div>`;
            } else {
                // Plain HTML content
                return `<div class="html-content">${content}</div>`;
            }
        } else {
            // Non-string content
            return '<div class="object-content">Content rendering not supported</div>';
        }
    }

    // Check if content is markdown
    isMarkdown(content) {
        // Simple heuristic to detect markdown
        const markdownIndicators = [
            /^\s*#+\s/m,      // Headers
            /\*\*.*\*\*/g,    // Bold
            /\*.*\*/g,        // Italic
            /`[^`]+`/g,        // Code
            /^\s*-\s+/m,      // Lists
            /^\s*\d+\.\s/m,   // Numbered lists
            /\[.*\]\(.*\)/g  // Links
        ];

        return markdownIndicators.some(pattern => pattern.test(content));
    }

    // Enhanced modal animations
    animateModalIn(modalId, callback) {
        const modalData = this.activeModals.get(modalId);
        if (!modalData) return;

        const modal = modalData.element;
        const overlay = modal.querySelector('.modal-backdrop');
        const content = modal.querySelector('.enhanced-modal-content');

        this.isAnimating = true;

        // Initial state
        overlay.style.opacity = '0';
        content.style.opacity = '0';
        content.style.transform = 'translate(-50%, -45%) scale(0.9)';

        // Force reflow
        modal.offsetHeight;

        // Animate in
        requestAnimationFrame(() => {
            overlay.style.transition = 'opacity 0.3s ease-in-out';
            overlay.style.opacity = '1';

            content.style.transition = 'opacity 0.3s ease-in-out, transform 0.3s ease-out';
            content.style.opacity = '1';
            content.style.transform = 'translate(-50%, -50%) scale(1)';

            setTimeout(() => {
                this.isAnimating = false;
                if (callback) callback();
            }, 300);
        });

        // Setup close button handlers
        this.setupCloseButtonHandlers(modalId);
    }

    // Setup close button handlers
    setupCloseButtonHandlers(modalId) {
        const modalData = this.activeModals.get(modalId);
        if (!modalData) return;

        const modal = modalData.element;
        const closeBtn = modal.querySelector('.modal-close-btn');

        if (closeBtn) {
            closeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.closeModal(modalId);
            });

            // Keyboard accessibility
            closeBtn.setAttribute('tabindex', '0');
        }

        // Touch support for mobile
        this.setupTouchGestures(modalId);
    }

    // Setup touch gestures for mobile
    setupTouchGestures(modalId) {
        const modalData = this.activeModals.get(modalId);
        if (!modalData) return;

        const modal = modalData.element;
        const content = modal.querySelector('.enhanced-modal-content');

        let touchStartY = 0;
        let touchStartX = 0;

        // Swipe down to close
        content.addEventListener('touchstart', (e) => {
            touchStartY = e.touches[0].clientY;
            touchStartX = e.touches[0].clientX;
        }, { passive: true });

        content.addEventListener('touchend', (e) => {
            const touchEndY = e.changedTouches[0].clientY;
            const touchEndX = e.changedTouches[0].clientX;
            const deltaY = touchEndY - touchStartY;
            const deltaX = touchEndX - touchStartX;

            // Swipe down threshold
            if (deltaY > 100 && Math.abs(deltaX) < 50) {
                this.closeModal(modalId);
            }
        });
    }

    // Close modal with animation
    closeModal(modalId) {
        const modalData = this.activeModals.get(modalId);
        if (!modalData || !modalData.isOpen) return;

        console.log(`üé≠ Closing modal: ${modalId}`);

        const modal = modalData.element;
        const overlay = modal.querySelector('.modal-backdrop');
        const content = modal.querySelector('.enhanced-modal-content');

        // Animate out
        this.isAnimating = true;

        content.style.transition = 'opacity 0.2s ease-in, transform 0.2s ease-in';
        content.style.opacity = '0';
        content.style.transform = 'translate(-50%, -45%) scale(0.95)';

        overlay.style.transition = 'opacity 0.2s ease-in-out';
        overlay.style.opacity = '0';

        setTimeout(() => {
            // Remove from DOM
            modal.remove();
            this.activeModals.delete(modalId);

            // Call close callback
            if (modalData.config.onClose) {
                modalData.config.onClose(modalId);
            }

            this.isAnimating = false;
        }, 200);
    }

    // Close top modal
    closeTopModal() {
        if (this.activeModals.size === 0) return;

        // Get the most recently opened modal
        const modalIds = Array.from(this.activeModals.keys());
        const topModalId = modalIds[modalIds.length - 1];
        this.closeModal(topModalId);
    }

    // Close all modals
    closeAllModals() {
        const modalIds = Array.from(this.activeModals.keys());
        modalIds.forEach(id => {
            this.closeModal(id);
        });
    }

    // Handle window resize
    handleResize() {
        console.log('üìê Handling modal resize');
        // Recalculate modal positioning and sizing
        this.repositionModals();
    }

    // Reposition modals for responsive design
    repositionModals() {
        for (const [modalId, modalData] of this.activeModals) {
            if (modalData.isOpen) {
                const modal = modalData.element;
                const content = modal.querySelector('.enhanced-modal-content');

                // Adjust for mobile screens
                if (window.innerWidth < 768) {
                    content.style.width = '95%';
                    content.style.maxWidth = 'none';
                    content.style.maxHeight = '80vh';
                    content.style.overflow = 'auto';
                } else {
                    content.style.width = modalData.config.width || 'auto';
                    content.style.maxHeight = '80vh';
                }
            }
        }
    }

    // Pause modal animations when page is hidden
    pauseModalAnimations() {
        document.querySelectorAll('.enhanced-modal-content').forEach(modal => {
            modal.style.animationPlayState = 'paused';
        });
    }

    // Resume modal animations when page is visible
    resumeModalAnimations() {
        document.querySelectorAll('.enhanced-modal-content').forEach(modal => {
            modal.style.animationPlayState = 'running';
        });
    }

    // Escape HTML to prevent XSS
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // Debounce function
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Get debug information
    getDebugInfo() {
        return {
            activeModals: this.activeModals.size,
            modalIds: Array.from(this.activeModals.keys()),
            isAnimating: this.isAnimating,
            hasKeyboardHandlers: this.keyboardHandlers.size,
            hasTouchGestures: this.touchGestures.size
        };
    }

    // Cleanup method
    cleanup() {
        console.log('üßπ Cleaning up EnhancedModalSystem');

        // Close all modals
        this.closeAllModals();

        // Remove event listeners
        for (const [key, handler] of this.keyboardHandlers) {
            document.removeEventListener(key, handler);
        }
        this.keyboardHandlers.clear();
        this.touchGestures.clear();

        // Clear caches
        this.activeModals.clear();
        this.modalHistory = [];
    }
}

// Enhanced CSS for modal system
const modalCSS = `
/* Enhanced Modal System */
.enhanced-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
    box-sizing: border-box;
}

.modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    transition: opacity 0.3s ease-in-out;
}

.enhanced-modal-content {
    background: linear-gradient(135deg, #1a1a2e, #16213e);
    border: 2px solid #4a5568;
    border-radius: 12px;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3);
    color: #e2e8f0;
    max-width: 800px;
    max-height: 80vh;
    overflow-y: auto;
    position: relative;
    outline: none;
}

.modal-header {
    padding: 20px 25px 15px 25px;
    border-bottom: 1px solid #4a5568;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: rgba(26, 29, 46, 0.3);
    border-radius: 12px 12px 0 0;
}

.modal-title {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: #e2e8f0;
    display: flex;
    align-items: center;
    gap: 10px;
}

.title-icon {
    font-size: 1.2em;
}

.modal-close-btn {
    background: transparent;
    border: 1px solid #4a5568;
    color: #e2e8f0;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    font-size: 18px;
}

.modal-close-btn:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: #64748b;
    transform: scale(1.1);
}

.modal-close-btn:focus {
    outline: 2px solid #60a5fa;
    outline-offset: 2px;
}

.modal-body {
    padding: 25px;
    overflow-y: auto;
    max-height: 60vh;
}

.modal-content-wrapper {
    line-height: 1.6;
}

.modal-footer {
    padding: 15px 25px 20px 25px;
    border-top: 1px solid #4a5568;
    background: rgba(26, 29, 46, 0.3);
    border-radius: 0 0 12px 12px;
    text-align: right;
}

/* Enhanced Content Styles */
.markdown-content {
    color: #e2e8f0;
}

.markdown-content h1,
.markdown-content h2,
.markdown-content h3 {
    color: #fbbf24;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    border-bottom: 1px solid #4a5568;
    padding-bottom: 0.3em;
}

.markdown-content h1 { font-size: 1.8em; }
.markdown-content h2 { font-size: 1.5em; }
.markdown-content h3 { font-size: 1.3em; }

.markdown-content strong {
    color: #fbbf24;
    font-weight: 600;
}

.markdown-content em {
    color: #c084fc;
    font-style: italic;
}

.markdown-content code {
    background: #374151;
    color: #f3f4f6;
    padding: 2px 6px;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
}

.markdown-content a {
    color: #60a5fa;
    text-decoration: none;
    border-bottom: 1px dotted #60a5fa;
    transition: color 0.2s ease-in-out;
}

.markdown-content a:hover {
    color: #93c5fd;
    border-bottom-style: solid;
}

.markdown-content ul,
.markdown-content ol {
    padding-left: 20px;
    margin: 1em 0;
}

.markdown-content li {
    margin: 0.5em 0;
    list-style-position: inside;
}

.markdown-content .numbered-list {
    color: #e2e8f0;
    font-weight: 500;
}

.markdown-content .bullet-list {
    color: #e2e8f0;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
    .enhanced-modal {
        padding: 10px;
    }

    .enhanced-modal-content {
        width: 95% !important;
        max-width: none !important;
        max-height: 85vh !important;
        margin: 0;
    }

    .modal-header {
        padding: 15px 20px 10px 20px;
    }

    .modal-title {
        font-size: 1.3rem;
    }

    .modal-body {
        padding: 20px;
        max-height: 60vh;
    }

    .modal-footer {
        padding: 10px 20px 15px 20px;
    }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
    .enhanced-modal-content,
    .modal-backdrop,
    .modal-close-btn {
        transition: none;
    }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
    .enhanced-modal-content {
        background: #000;
        border-color: #fff;
        color: #fff;
    }

    .modal-header {
        border-bottom-color: #fff;
        background: #000;
    }

    .modal-footer {
        border-top-color: #fff;
        background: #000;
    }
}

/* Print styles */
@media print {
    .enhanced-modal {
        display: none !important;
    }
}
`;

// Inject enhanced modal CSS
const modalStyleSheet = document.createElement('style');
modalStyleSheet.textContent = modalCSS;
document.head.appendChild(modalStyleSheet);

// Initialize the enhanced modal system
window.enhancedModalSystem = new EnhancedModalSystem();

// Enhanced global functions
window.showEnhancedModal = function(title, content, options = {}) {
    if (window.enhancedModalSystem) {
        return window.enhancedModalSystem.showModal(title, content, options);
    } else {
        console.warn('Enhanced modal system not initialized');
        return null;
    }
};

window.closeAllModals = function() {
    if (window.enhancedModalSystem) {
        window.enhancedModalSystem.closeAllModals();
    }
};

window.debugModals = function() {
    if (window.enhancedModalSystem) {
        console.log('üîç Enhanced Modal System Debug Info:');
        console.log(window.enhancedModalSystem.getDebugInfo());
    } else {
        console.warn('Enhanced modal system not initialized');
    }
};

console.log('üé≠ Enhanced modal system loaded');



// ============================================
// ENHANCED MODAL SYSTEM INTEGRATION
// ============================================

// Patch existing showModal function if it exists
if (window.worldManager && window.worldManager.showModal) {
    const originalShowModal = window.worldManager.showModal;

    window.worldManager.showModal = function(title, content, options = {}) {
        console.log('üé≠ Using enhanced modal for:', title);

        // Enhanced modal options
        const enhancedOptions = {
            width: options.width || 'auto',
            height: options.height || 'auto',
            backdropBlur: options.backdropBlur !== false,
            showHeader: options.showHeader !== false,
            allowClose: options.allowClose !== false,
            customStyles: {
                ...options.customStyles,
                animation: 'slide-in'
            },
            ...options
        };

        // Use enhanced modal system
        if (window.enhancedModalSystem) {
            const modalId = window.enhancedModalSystem.showModal(title, content, enhancedOptions);

            // Add to history for debugging
            if (window.enhancedModalSystem.modalHistory) {
                window.enhancedModalSystem.modalHistory.push({
                    id: modalId,
                    title: title,
                    timestamp: Date.now()
                });
            }

            return modalId;
        } else {
            // Fallback to original modal system
            return originalShowModal.call(this, title, content, options);
        }
    };

    console.log('‚úÖ Enhanced modal integration active');
} else {
    console.warn('‚ö†Ô∏è  Original showModal function not found');
}

// Enhanced modal examples for testing
window.testEnhancedModal = function() {
    const testContent = `
# Enhanced Modal System Test

This is an **enhanced modal** with:

- üé® Smooth animations
- üìù Enhanced markdown rendering
- üì± Mobile responsive design
- ‚å®Ô∏è Keyboard navigation
- üëÜ Touch gesture support

## Features

### Advanced Markdown Support
- Headers with proper styling
- **Bold** and *italic* text
- \`Code snippets\` with syntax highlighting
- [Links](https://example.com) that open in new tabs
- Numbered and bulleted lists
- Blockquotes and tables

### Interactive Elements
- Hover effects on close button
- Swipe down to close on mobile
- Escape key to close
- Click backdrop to close

### Accessibility
- Proper ARIA labels
- Keyboard navigation support
- Screen reader friendly
- High contrast mode support

## Code Example
\`\`\`javascript
const modalId = window.showEnhancedModal(
    'Test Modal',
    'This is a test modal with **enhanced** features!',
    {
        width: 600,
        height: 'auto',
        backdropBlur: true
    }
);
\`\`\`

---

*Generated at ${new Date().toLocaleString()}*
    `;

    window.showEnhancedModal(
        'üé≠ Enhanced Modal Test',
        testContent,
        {
            width: 700,
            height: 'auto',
            footerContent: '<button onclick="window.closeAllModals()" style="padding: 8px 16px; background: #60a5fa; color: white; border: none; border-radius: 4px; cursor: pointer;">Close All</button>',
            backdropBlur: true
        }
    );
};

console.log('üé≠ Enhanced modal integration complete');
